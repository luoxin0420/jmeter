<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">E:\workspace\extlib.jar</stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1438064469000</longProp>
        <longProp name="ThreadGroup.end_time">1438064469000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">../../testdata/log10.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Result Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Log Errors Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="TestPlan.comments">This logs the errors to a log file</stringProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="JScode" elementType="Argument">
              <stringProp name="Argument.name">JScode</stringProp>
              <stringProp name="Argument.value">003FyUiM0tavt72bYBhM0AdZiM0FyUix</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SessionID" elementType="Argument">
              <stringProp name="Argument.name">SessionID</stringProp>
              <stringProp name="Argument.value">8c16d893101ef4021</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">登录返回</stringProp>
            </elementProp>
            <elementProp name="UserID" elementType="Argument">
              <stringProp name="Argument.name">UserID</stringProp>
              <stringProp name="Argument.value">3131</stringProp>
              <stringProp name="Argument.desc">登录返回</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="nickName" elementType="Argument">
              <stringProp name="Argument.name">nickName</stringProp>
              <stringProp name="Argument.value">ixxxxx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="avatarUrl" elementType="Argument">
              <stringProp name="Argument.name">avatarUrl</stringProp>
              <stringProp name="Argument.value">http://wx.qlogo.cn/mmopen/vi_32/yxZWGknoAeW64CRW9nx1MeYiaWx3wHh5xaFtUGzwaNFk6dY5EMMs8RdzXOTrlFZQSu2Y1gIK5ITJ2jicwqRHTMQg/0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ID" elementType="Argument">
              <stringProp name="Argument.name">ID</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LoginFlag" elementType="Argument">
              <stringProp name="Argument.name">LoginFlag</stringProp>
              <stringProp name="Argument.value">True</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="default_cover_url" elementType="Argument">
              <stringProp name="Argument.name">default_cover_url</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="user_cover_url" elementType="Argument">
              <stringProp name="Argument.name">user_cover_url</stringProp>
              <stringProp name="Argument.value">&quot;&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="UserID2" elementType="Argument">
              <stringProp name="Argument.name">UserID2</stringProp>
              <stringProp name="Argument.value">3544</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SessionID2" elementType="Argument">
              <stringProp name="Argument.name">SessionID2</stringProp>
              <stringProp name="Argument.value">c0891af05d1ef4225</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">www.ixiaolian.cc/server/ytime_stage/v2</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Request Header" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">charset</stringProp>
              <stringProp name="Header.value">utf-8</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="初始环境：(登录)" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="初始环境：得到SESSIONID" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;:&quot;${ID}&quot;,&#xd;
	&quot;data&quot;:&#xd;
	{&#xd;
		&quot;jsCode&quot;:&quot;${JScode}&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mp/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Get Random ID" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49592">206</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证响应JSON结构" enabled="true">
              <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = responseJSON.getNames(responseJSON);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();
//System.out.println(field_name);

if (field_name.indexOf(&quot;dataidtimeversio&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="得到sessionid与userid/nickName/avatarUrl" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	String result = data.getString(&quot;sessionid&quot;);
	int uid = data.getInt(&quot;user_id&quot;);
	//System.out.println(result);
	vars.put(&quot;SessionID&quot;,result);
	vars.put(&quot;LoginFlag&quot;,&quot;True&quot;);
	vars.put(&quot;UserID&quot;,String.valueOf(uid));
	JSONObject user = responseJSON.getJSONObject(&quot;user&quot;);
	String nickName = user.getString(&quot;nickName&quot;);
	String avatarUrl = user.getString(&quot;avatarUrl&quot;);
	vars.put(&quot;nickName&quot;,nickName);
	vars.put(&quot;avatarUrl&quot;,avatarUrl);
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}



</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="得到默认封面URL" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">event/covers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Request Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">charset</stringProp>
                  <stringProp name="Header.value">utf-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">session-id</stringProp>
                  <stringProp name="Header.value">${SessionID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Get URL" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.json.*;
import java.util.Arrays;

int count = 0;
String  = &quot;&quot;;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	JSONArray covers = data.getJSONArray(&quot;default_covers&quot;);
	url = covers.getJSONObject(0).getString(&quot;url&quot;);
	vars.put(&quot;default_cover_url&quot;,url);

}
catch (Exception e) {
	System.out.println(e);
}
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果登录成功，开始测试" enabled="true">
          <stringProp name="IfController.condition">&quot;${LoginFlag}&quot; == &quot;True&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Request Header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">charset</stringProp>
                <stringProp name="Header.value">utf-8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">session-id</stringProp>
                <stringProp name="Header.value">${SessionID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="主题协议（日程表）" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="测试日程表动作（创建、查询、更新、删除）" enabled="true"/>
            <hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="title" elementType="Argument">
                    <stringProp name="Argument.name">title</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="curtime" elementType="Argument">
                    <stringProp name="Argument.name">curtime</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="timeline_id" elementType="Argument">
                    <stringProp name="Argument.name">timeline_id</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="start" elementType="Argument">
                    <stringProp name="Argument.name">start</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="end" elementType="Argument">
                    <stringProp name="Argument.name">end</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="start_string" elementType="Argument">
                    <stringProp name="Argument.name">start_string</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="end_string" elementType="Argument">
                    <stringProp name="Argument.name">end_string</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="create_time" elementType="Argument">
                    <stringProp name="Argument.name">create_time</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="创建-查询-删除" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="创建日程表(tag/create)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="创建日程表" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;tag_info&quot;:{&quot;title&quot;:&quot;${title}&quot;}}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">tag/create</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置开始时间与结束时间戳，title" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;
String tstamp = new ExtLibrary().stampNowDate();
String title = &quot;qatest_&quot; + tstamp;
vars.put(&quot;title&quot;,title);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="得到tag_Id" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	Long tag_id = data.getJSONObject(&quot;tag_info&quot;).getLong(&quot;tag_id&quot;);
	vars.put(&quot;tag_id&quot;,String.valueOf(tag_id));

}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}



</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="标记为已查看(tag/look)" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="标记为已查看(tag/looked)" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="标记为已查看" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;tag_id&quot;:${tag_id}}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">tag/looked</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);
</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49592">206</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证result" enabled="true">
                      <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
String result = &quot;&quot;;

try
{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	result = data.getString(&quot;result&quot;);
	
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}

if (!result.equals(&quot;success&quot;))
{                       
	Failure = true;
	FailureMessage = &quot;Update reminder is failed&quot;;
} </stringProp>
                      <stringProp name="BeanShellAssertion.filename"></stringProp>
                      <stringProp name="BeanShellAssertion.parameters"></stringProp>
                      <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                    </BeanShellAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="查询日程表数据(/tag/tag_data)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询日程表数据 " enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;Z22WB7X2GN&quot;,&quot;data&quot;:{&quot;tag_id&quot;:${tag_id}}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">tag/tag_data</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数值" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);



</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证data结构" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = data.getNames(data);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();

if (field_name.indexOf(&quot;actorsactors_countclose_all_remindersend_notificationtaguser_type&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="查询日程表(tag/query)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询日程表" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;PICFZAZVSM&quot;,&quot;data&quot;:{&quot;tag_id&quot;:&quot;${tag_id}&quot;,&quot;rows&quot;:1,&quot;first_request&quot;:1}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">tag/query</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证响应的data 数据结构" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

int count = 0;
String name = &quot;&quot;;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = data.getNames(data);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();
//System.out.println(field_name);

if (field_name.indexOf(&quot;close_all_reminderevent_countfiles_statfolder_listjoin_statlimit_time_on_pageneed_reviewrepeat_event_counttaguser_type&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="查询日程列表(tag/my_tags)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询日程列表" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;JVC3AXU6R7&quot;,&quot;data&quot;:{&quot;offset&quot;:0,&quot;rows&quot;:6,&quot;query_type&quot;:1}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">tag/my_tags</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证响应的data 数据结构" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

int count = 0;
String name = &quot;&quot;;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = data.getNames(data);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();
//System.out.println(field_name);

if (field_name.indexOf(&quot;my_tags&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="日程表参与者列表(tag/actors)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="日程表参与者列表" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;NRP5BKHTD5&quot;,&quot;data&quot;:{&quot;request_type&quot;:&quot;1&quot;,&quot;tag_id&quot;:&quot;${tag_id}&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">tag/actors</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证userid" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

int count = 0;
int uid = 0;
boolean flag = false;
String exp_uid = vars.get(&quot;UserID&quot;);
String temp = &quot;&quot;;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	JSONArray rept = data.getJSONArray(&quot;actors&quot;);
	for (int i = 0; i &lt; rept.length(); i++) { 
        uid = rept.getJSONObject(i).getJSONObject(&quot;actor&quot;).getInt(&quot;user_id&quot;);
        temp = String.valueOf(uid);
        if (exp_uid.equals(temp)){
        	flag = true;
        	break;
        }
	}
}
catch (Exception e) {
	System.out.println(e);
}

if (!flag)
{                       
	Failure = true;
	FailureMessage = &quot;Actors list is not right&quot;;
} </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="分享日程表(tag/share)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="分享日程表(tag/share)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;VFLQSJYUY8&quot;,&quot;data&quot;:{&quot;tag_id&quot;:${tag_id}}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">tag/share</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证URL" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String url=&quot;&quot;;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	url = data.getString(&quot;share_image_url&quot;);
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}

if (url.length() &lt; 1)
{                       
	Failure = true;
	FailureMessage = &quot;share_image_url is not right&quot;;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="参与日程表(tag/join)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="参与日程表" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;tag_id&quot;:${tag_id}}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">tag/join</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;

String tstamp = new ExtLibrary().stampNowDate();
vars.put(&quot;curtime&quot;,tstamp);

String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Request Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">charset</stringProp>
                        <stringProp name="Header.value">utf-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">session-id</stringProp>
                        <stringProp name="Header.value">${SessionID2}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证响应JSON结构" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = responseJSON.getNames(responseJSON);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();
//System.out.println(field_name);

if (field_name.indexOf(&quot;dataidtimeversio&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="验证参与者列表(tag/actors)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="参与者列表" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;tag_id&quot;:${tag_id}}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">tag/actors</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证userid" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

int count = 0;
int uid = 0;
boolean flag = false;
String uid1 = vars.get(&quot;UserID&quot;);
String uid2 = vars.get(&quot;UserID2&quot;);
String[] uidArray = {uid1, uid2};
String temp = &quot;&quot;;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	JSONArray rept = data.getJSONArray(&quot;actors&quot;);
	if (rept.length() != 2)
	{                       
		Failure = true;
		FailureMessage = &quot;Actors length is not right&quot;;
	} 
	else
	{
		 for (int i = 0; i &lt; rept.length(); i++) { 
		        uid = rept.getJSONObject(i).getJSONObject(&quot;actor&quot;).getInt(&quot;user_id&quot;);
		        temp = String.valueOf(uid);
		        if (!Arrays.asList(uidArray).contains(temp)){
		        	flag = true;
		        	break;
		        }
		  }
		  if (flag)
		{                       
			Failure = true;
			FailureMessage = &quot;Actors uid is not right&quot;;
		}
	}

}
catch (Exception e) {
	System.out.println(e);
}

 

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="更新日程表" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="更新日程表(tag/update)" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="更新事件(tag/update)" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;tag_info&quot;:{&quot;tag_id&quot;:${tag_id},&quot;title&quot;:&quot;Update${title}&quot;,&quot;owner_id&quot;:${UserID},&quot;public_visible&quot;:0,&quot;templet_id&quot;:0,&quot;create_time&quot;:1498101535533,&quot;update_time&quot;:1498101535533}}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">tag/update</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Get Random ID" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);



</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置时间" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import jmeter_extlib.ExtLibrary;
String tstamp = new ExtLibrary().stampNowDate();
vars.put(&quot;curtime&quot;,tstamp);</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49592">206</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="验证更新" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;id&quot;:&quot;VC7ZUYSTNE&quot;,&quot;data&quot;:{&quot;tag_id&quot;:&quot;${tag_id}&quot;,&quot;rows&quot;:4,&quot;first_request&quot;:1}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">tag/query</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49592">206</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证更新数据" enabled="true">
                      <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String temp = &quot;&quot;;
String exp_title = &quot;Update&quot; + vars.get(&quot;title&quot;);
String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	String title = data.getJSONObject(&quot;tag&quot;).getJSONObject(&quot;tag_info&quot;).getString(&quot;title&quot;);
	temp = String.valueOf(title);

}
catch (Exception e) {
	System.out.println(e);
}

if (!exp_title.equals(temp))
{                       
	Failure = true;
	FailureMessage = &quot;Event id is not right&quot;;
} </stringProp>
                      <stringProp name="BeanShellAssertion.filename"></stringProp>
                      <stringProp name="BeanShellAssertion.parameters"></stringProp>
                      <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                    </BeanShellAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="提醒设置" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="提醒设置(tag/set_reminders)" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改提醒设置" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;id&quot;:&quot;6FAFENZ5A3&quot;,&quot;data&quot;:{&quot;tag_id&quot;:&quot;${tag_id}&quot;,&quot;close_reminder&quot;:0}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">tag/set_reminders</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);
</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49592">206</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证result" enabled="true">
                      <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
String result = &quot;&quot;;

try
{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	result = data.getString(&quot;result&quot;);
	
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}

if (!result.equals(&quot;success&quot;))
{                       
	Failure = true;
	FailureMessage = &quot;Update reminder is failed&quot;;
} </stringProp>
                      <stringProp name="BeanShellAssertion.filename"></stringProp>
                      <stringProp name="BeanShellAssertion.parameters"></stringProp>
                      <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                    </BeanShellAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User1更新发起者to User2(tag/change_sponsor)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User1更新发起者to User2" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;new_sponsor_id&quot;:${UserID2},&quot;tag_id&quot;:&quot;${tag_id}&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">tag/change_sponsor</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Get Random ID" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);



</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证result" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
String result = &quot;&quot;;
try
{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	result = data.getString(&quot;result&quot;);
	
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}

if (!result.equals(&quot;success&quot;))
{                       
	Failure = true;
	FailureMessage = &quot;Update reminder is failed&quot;;
} </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User1退出日程表(tag/quit)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User1退出日程表退出事件" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;tag_id&quot;:${tag_id}}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">tag/quit</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证result" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
String result = &quot;&quot;;

try
{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	result = data.getString(&quot;result&quot;);
	
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}

if (!result.equals(&quot;success&quot;))
{                       
	Failure = true;
	FailureMessage = &quot;Quit event is failed&quot;;
} </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Request Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">charset</stringProp>
                        <stringProp name="Header.value">utf-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">session-id</stringProp>
                        <stringProp name="Header.value">${SessionID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User1重新参与日程表(tag/join)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User1重新参与日程表" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;tag_id&quot;:${tag_id}}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">tag/join</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;

String tstamp = new ExtLibrary().stampNowDate();
vars.put(&quot;curtime&quot;,tstamp);

String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Request Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">charset</stringProp>
                        <stringProp name="Header.value">utf-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">session-id</stringProp>
                        <stringProp name="Header.value">${SessionID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证响应JSON结构" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = responseJSON.getNames(responseJSON);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();
//System.out.println(field_name);

if (field_name.indexOf(&quot;dataidtimeversio&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User2移除参与者User1(tag/remove_actor)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User2移除参与者User1" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;tag_id&quot;:&quot;${tag_id}&quot;,&quot;actor_ids&quot;:[${UserID}]}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">tag/remove_actor</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Get Random ID" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);



</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证result" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
result = &quot;&quot;;

try
{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	result = data.getString(&quot;result&quot;);
	
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}

if (!result.equals(&quot;success&quot;))
{                       
	Failure = true;
	FailureMessage = &quot;Update reminder is failed&quot;;
} </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Request Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">charset</stringProp>
                        <stringProp name="Header.value">utf-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">session-id</stringProp>
                        <stringProp name="Header.value">${SessionID2}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User1重新参与日程表(tag/join)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User1重新参与日程表" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;tag_id&quot;:${tag_id}}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">tag/join</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;

String tstamp = new ExtLibrary().stampNowDate();
vars.put(&quot;curtime&quot;,tstamp);

String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Request Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">charset</stringProp>
                        <stringProp name="Header.value">utf-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">session-id</stringProp>
                        <stringProp name="Header.value">${SessionID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证响应JSON结构" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = responseJSON.getNames(responseJSON);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();
//System.out.println(field_name);

if (field_name.indexOf(&quot;dataidtimeversio&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User2指定管理员User1(tag/bull_admin)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User2指定管理员User1" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;tag_id&quot;:&quot;${tag_id}&quot;,&quot;admin_ids&quot;:[${UserID}]}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">tag/bull_admin</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Get Random ID" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);



</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证result" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
String result = &quot;&quot;;
try
{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	result = data.getString(&quot;result&quot;);
	
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}

if (!result.equals(&quot;success&quot;))
{                       
	Failure = true;
	FailureMessage = &quot;Update reminder is failed&quot;;
} </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Request Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">charset</stringProp>
                        <stringProp name="Header.value">utf-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">session-id</stringProp>
                        <stringProp name="Header.value">${SessionID2}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User2删除日程表(tag/delete)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="删除日程表" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;ZKXXHS75I5&quot;,&quot;data&quot;:{&quot;tag_id&quot;:&quot;${tag_id}&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">tag/delete</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证结果" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	String result = data.getString(&quot;result&quot;);
	if (!result.equals(&quot;success&quot;))
	{                       
		Failure = true;
		FailureMessage = &quot;Delete event is failed&quot;;
	} 
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Request Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">charset</stringProp>
                        <stringProp name="Header.value">utf-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">session-id</stringProp>
                        <stringProp name="Header.value">${SessionID2}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="未完成接口" enabled="false"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="设置新事件通知开关" enabled="true"/>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="审核加入日程表" enabled="true"/>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="查询日程审核状态" enabled="true"/>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="请求日程审核" enabled="true"/>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="审核加入日程" enabled="true"/>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="事件协议" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="查询事件选项(event/options)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="事件选项" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;YHSYU9VPMW&quot;,&quot;data&quot;:{}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">event/option</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49592">206</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证重复事件选项" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

int count = 0;
String name = &quot;&quot;;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	JSONArray rept = data.getJSONArray(&quot;repeateds&quot;);
	for (int i = 0; i &lt; rept.length(); i++) { 
        name = name + rept.getJSONObject(i).getString(&quot;caption&quot;);
	}
}
catch (Exception e) {
	System.out.println(e);
}

if (name.indexOf(&quot;不重复每天重复每周重复每两周重复每月重复每年重复工作日重复&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Capital value is not right. actual name:&quot; + name;
} </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证提醒事件选项" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

int count = 0;
String name = &quot;&quot;;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	JSONArray reminder = data.getJSONArray(&quot;reminders&quot;);
	for (int i = 0; i &lt; reminder.length(); i++) { 
        name = name + reminder.getJSONObject(i).getString(&quot;caption&quot;);
	}
}
catch (Exception e) {
	System.out.println(e);
}

if (name.indexOf(&quot;不设置开始提醒开始时开始前5分钟开始前15分钟开始前30分钟开始前1小时开始前2小时开始前1天开始前2天开始前1周&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Capital value is not right. actual name:&quot; + name;
} </stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="查询评论模板(event/remarks_template)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="评论模板" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;YHSYU9VPMW&quot;,&quot;data&quot;:{}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">event/remarks_template</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证评论模板结构" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
JSONArray re = data.getJSONArray(&quot;remarksTempletData&quot;);
JSONObject retemp = re.getJSONObject(0);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = retemp.getNames(retemp);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();

if (field_name.indexOf(&quot;checkedcontentcreate_timedata_typenecessaryquestion_idtemplet_id&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="测试封面资源" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="查询封面资源(event/covers)" enabled="true"/>
              <hashTree>
                <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="查询封面资源" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询全部" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/covers</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Get Random ID" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证响应数据结构" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = responseJSON.getNames(responseJSON);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();
//System.out.println(field_name);

if (field_name.indexOf(&quot;dataidtimeversio&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证封面个数" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

int count = 0;
String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	JSONArray covers = data.getJSONArray(&quot;default_covers&quot;);
	count = covers.length();
	//System.out.println(count);
}
catch (Exception e) {
	System.out.println(e);
}


if (count !=47 )
{                       
	Failure = true;
	FailureMessage = &quot;Covers number is not right&quot;;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="得到用户封面" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.json.*;
import java.util.Arrays;

int count = 0;
String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
String uid = vars.get(&quot;UserID&quot;);

try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	JSONArray covers = data.getJSONArray(&quot;user_covers&quot;);
	for (int i = 0; i &lt; covers.length(); i++) { 
         Long id = covers.getJSONObject(i).getLong(&quot;owner_id&quot;);
         if (id.equals(uid)){
         		String url = covers.getJSONObject(i).getString(&quot;url&quot;);
         		vars.put(&quot;user_cover_url&quot;,url);
         		break;
         }
	}
        
}
catch (Exception e) {
	System.out.println(e);
}</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询默认" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;M9PITQGE2E&quot;,&quot;data&quot;:{&quot;tag&quot;:&quot;default&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/covers</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证Title" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

int count = 0;
String title = &quot;&quot;;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	JSONArray covers = data.getJSONArray(&quot;default_covers&quot;);
	for (int i = 0; i &lt; covers.length(); i++) { 
        title = title + covers.getJSONObject(i).getString(&quot;title&quot;);
        //System.out.println(temp);
	}
}
catch (Exception e) {
	System.out.println(e);
}


if (title.indexOf(&quot;共享文件共享照片共享视频&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Title value is not right. actual name:&quot; + temp;
} 
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果用户封面存在" enabled="true">
                <stringProp name="IfController.condition">&quot;${default_cover_url}&quot; != &quot;&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="删除封面(event/delete_covers)" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="删除封面" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;urls&quot;:[&quot;${default_cover_url}&quot;]}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">event/delete_covers</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证result" enabled="true">
                      <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
String result = &quot;&quot;;

try
{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	result = data.getString(&quot;result&quot;);
	
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}

if (!result.equals(&quot;success&quot;))
{                       
	Failure = true;
	FailureMessage = &quot;Delete cover is failed&quot;;
} 


</stringProp>
                      <stringProp name="BeanShellAssertion.filename"></stringProp>
                      <stringProp name="BeanShellAssertion.parameters"></stringProp>
                      <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                    </BeanShellAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="查询指定时间范围内的事件(event/query_between)" enabled="true"/>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="查询指定时间范围内的事件" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="带有效的开始时间与结束时间" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;OUT6EIJMZS&quot;,&quot;data&quot;:{&quot;begin_time&quot;:${start},&quot;end_time&quot;:${end},&quot;show_repeated&quot;:0}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">event/query_between</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="得到开始时间与结束时间戳" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import jmeter_extlib.ExtLibrary;
String start = new ExtLibrary().dateToStamp(&quot;2016-06-01-10&quot;);
vars.put(&quot;start&quot;,start);
String end = new ExtLibrary().dateToStamp(&quot;2016-06-05-10&quot;);
vars.put(&quot;end&quot;,end);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49592">206</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证事件的时间" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

long time = 0;
String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	JSONArray posts = data.getJSONArray(&quot;posts&quot;);
	String start = vars.get(&quot;start&quot;);
	String end = vars.get(&quot;end&quot;);

	for (int i = 0; i &lt; posts.length(); i++) { 
        time = posts.getJSONObject(i).getJSONObject(&quot;timeline_data&quot;).getLong(&quot;event_time&quot;);
        //System.out.println(time);
        if (time &lt; Long.parseLong(start) || time &gt; Long.parseLong(end)){
        		Failure = true;
			FailureMessage = &quot;Event time is not right &quot; + &quot;start:&quot; + start + &quot; end:&quot; + end + &quot; event_time:&quot; + String.valueOf(time);
			break;
        }
	}
}
catch (Exception e) {
	System.out.println(e);
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="开始时间&gt;结束时间" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;OUT6EIJMZS&quot;,&quot;data&quot;:{&quot;begin_time&quot;:${start},&quot;end_time&quot;:${end},&quot;show_repeated&quot;:0}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">event/query_between</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="得到开始时间与结束时间戳" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import jmeter_extlib.ExtLibrary;
String start = new ExtLibrary().dateToStamp(&quot;2016-06-09-10&quot;);
vars.put(&quot;start&quot;,start);
String end = new ExtLibrary().dateToStamp(&quot;2016-06-05-10&quot;);
vars.put(&quot;end&quot;,end);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证ERROR信息" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String error = &quot;&quot;;
String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
try{
	 error = responseJSON.getString(&quot;error&quot;);
	 System.out.println(error);
}
catch (Exception e) {
	System.out.println(e);
}


if (error.length() == 0)
{                       
	Failure = true;
	FailureMessage = &quot;Error information is not right&quot;;
} 
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="我的事件(event/my_event)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="我的事件（指定返回的行数）" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;E8G2QMA9AE&quot;,&quot;data&quot;:{&quot;type&quot;:&quot;up&quot;,&quot;query_date&quot;:0,&quot;offset&quot;:0,&quot;rows&quot;:1}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">event/my_event</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证行数" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

long time = 0;
String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	JSONArray posts = data.getJSONArray(&quot;posts&quot;);

	if (posts.length() != 1){
        	Failure = true;
		FailureMessage = &quot;Rows are not right, actual: &quot; + String.valueOf(posts.length());
        }
	
}
catch (Exception e) {
	System.out.println(e);
}


</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="测试事件动作（创建、查询、更新、删除）" enabled="true">
              <stringProp name="TestPlan.comments">测试前提：确保测试账户只包含唯一的群日历，并且里面无任何事件</stringProp>
            </GenericController>
            <hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="title" elementType="Argument">
                    <stringProp name="Argument.name">title</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="curtime" elementType="Argument">
                    <stringProp name="Argument.name">curtime</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="timeline_id" elementType="Argument">
                    <stringProp name="Argument.name">timeline_id</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="start" elementType="Argument">
                    <stringProp name="Argument.name">start</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="end" elementType="Argument">
                    <stringProp name="Argument.name">end</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="start_string" elementType="Argument">
                    <stringProp name="Argument.name">start_string</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="end_string" elementType="Argument">
                    <stringProp name="Argument.name">end_string</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="create_time" elementType="Argument">
                    <stringProp name="Argument.name">create_time</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="创建-查询-删除" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="创建事件(event/create)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="创建简单事件" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;3NUWIE4EAX&quot;,&quot;data&quot;:{&quot;title&quot;:&quot;${title}&quot;,&quot;event_contents&quot;:{&quot;list&quot;:[]},&quot;attach_list&quot;:[],&quot;event_display&quot;:{&quot;cover_url&quot;:&quot;${default_cover_url}&quot;},&quot;event_time&quot;:{&quot;begin_time&quot;:${start},&quot;end_time&quot;:${end},&quot;reminders_begin&quot;:[-1],&quot;reminders_end&quot;:[-1],&quot;repeated_type&quot;:0,&quot;repeated_end_time&quot;:0,&quot;completion_condition&quot;:0,&quot;completion_condition_end&quot;:0,&quot;phone_reminder&quot;:0}}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/create</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置开始时间与结束时间戳，title" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;
String tstamp = new ExtLibrary().stampNowDate();
//System.out.println(tstamp);
String start = new ExtLibrary().addTime(tstamp,2,&quot;hour&quot;);
//System.out.println(start);
String start_string = new ExtLibrary().stampToDate(start);
System.out.println(start_string);
vars.put(&quot;start_string&quot;,start_string);
vars.put(&quot;start&quot;,start);
String end = new ExtLibrary().addTime(tstamp,3,&quot;hour&quot;);
vars.put(&quot;end&quot;,end);
String end_string = new ExtLibrary().stampToDate(end);
vars.put(&quot;end_string&quot;,end_string);
//System.out.println(end);
String title = &quot;qatest_&quot; + tstamp;
vars.put(&quot;title&quot;,title);

</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="得到event_Id" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	Long event_id = data.getLong(&quot;event_id&quot;);
	vars.put(&quot;event_id&quot;,String.valueOf(event_id));

}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}



</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="标记为已查看" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="标记为已查看(event/looked)" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="标记为已查看" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;event_id&quot;:${event_id}}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">event/looked</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);
</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49592">206</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证result" enabled="true">
                      <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
String result = &quot;&quot;;

try
{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	result = data.getString(&quot;result&quot;);
	
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}

if (!result.equals(&quot;success&quot;))
{                       
	Failure = true;
	FailureMessage = &quot;Update reminder is failed&quot;;
} </stringProp>
                      <stringProp name="BeanShellAssertion.filename"></stringProp>
                      <stringProp name="BeanShellAssertion.parameters"></stringProp>
                      <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                    </BeanShellAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="查询事件详情(event/slide)" enabled="false"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询事件详情" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;68V3W4ZYD9&quot;,&quot;data&quot;:{&quot;event_id&quot;:&quot;${event_id}&quot;,&quot;timeline_id&quot;:0}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/slide</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证响应的数据结构" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

int count = 0;
String name = &quot;&quot;;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
JSONObject pdata = data.getJSONObject(&quot;post_data&quot;);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = pdata.getNames(pdata);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();
//System.out.println(field_name);

if (field_name.indexOf(&quot;data_typeeventplugin_typesponsor&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证event_id" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String temp = &quot;&quot;;
String exp_eid = vars.get(&quot;event_id&quot;);
String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;).getJSONObject(&quot;post_data&quot;).getJSONObject(&quot;event&quot;);
	Long eid = data.getLong(&quot;event_id&quot;);
	temp = String.valueOf(eid);

}
catch (Exception e) {
	System.out.println(e);
}

if (!exp_eid.equals(temp))
{                       
	Failure = true;
	FailureMessage = &quot;Event id is not right&quot;;
} </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="查询事件详情(event/query)" enabled="true">
                <stringProp name="TestPlan.comments">只包括事件的相关信息</stringProp>
              </GenericController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询事件详情" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;68V3W4ZYD9&quot;,&quot;data&quot;:{&quot;event_id&quot;:&quot;${event_id}&quot;,&quot;timeline_id&quot;:0}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/query</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证响应的data 数据结构" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

int count = 0;
String name = &quot;&quot;;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = data.getNames(data);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();
//System.out.println(field_name);

if (field_name.indexOf(&quot;actorscomplex_captionscreate_timeevent_contentsevent_displayevent_idevent_ruleevent_timefiles_statjoin_statlimit_time_on_pageneed_reviewtimeline_idtitletopuser_type&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证event_id" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String temp = &quot;&quot;;
String exp_eid = vars.get(&quot;event_id&quot;);
String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	Long eid = data.getLong(&quot;event_id&quot;);
	temp = String.valueOf(eid);


}
catch (Exception e) {
	System.out.println(e);
}

if (!exp_eid.equals(temp))
{                       
	Failure = true;
	FailureMessage = &quot;Event id is not right&quot;;
} </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="得到timeline_id" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import org.json.*;
import java.util.Arrays;

String temp = &quot;&quot;;
String exp_eid = vars.get(&quot;event_id&quot;);
String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	Long timeline_id = data.getLong(&quot;timeline_id&quot;);
	vars.put(&quot;timeline_id&quot;,String.valueOf(timeline_id));
	Long create_time = data.getLong(&quot;create_time&quot;);
	vars.put(&quot;create_time&quot;,String.valueOf(create_time));

}
catch (Exception e) {
	System.out.println(e);
}</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="参与者列表(event/actors)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="参与者列表" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;GPOCT489ID&quot;,&quot;data&quot;:{&quot;request_type&quot;:&quot;0&quot;,&quot;event_id&quot;:&quot;${event_id}&quot;,&quot;timeline_id&quot;:&quot;${timeline_id}&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/actors</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证userid" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

int count = 0;
int uid = 0;
boolean flag = false;
String exp_uid = vars.get(&quot;UserID&quot;);
String temp = &quot;&quot;;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	JSONArray rept = data.getJSONArray(&quot;actors&quot;);
	for (int i = 0; i &lt; rept.length(); i++) { 
        uid = rept.getJSONObject(i).getJSONObject(&quot;actor&quot;).getInt(&quot;user_id&quot;);
        temp = String.valueOf(uid);
        if (exp_uid.equals(temp)){
        	flag = true;
        	break;
        }
	}
}
catch (Exception e) {
	System.out.println(e);
}

if (!flag)
{                       
	Failure = true;
	FailureMessage = &quot;Actors list is not right&quot;;
} </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="分享事件(event/share)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="分享事件(event/share)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;NE6V9PTDTI&quot;,&quot;data&quot;:{&quot;event_id&quot;:${event_id},&quot;timeline_id&quot;:${timeline_id}}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/share</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证URL" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String url=&quot;&quot;;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	url = data.getString(&quot;share_image_url&quot;);
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}

if (url.length() &lt; 1)
{                       
	Failure = true;
	FailureMessage = &quot;share_image_url is not right&quot;;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="参与事件(event/join)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="参与事件" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;event_id&quot;:${event_id}}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/join</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;

String tstamp = new ExtLibrary().stampNowDate();
vars.put(&quot;curtime&quot;,tstamp);

String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Request Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">charset</stringProp>
                        <stringProp name="Header.value">utf-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">session-id</stringProp>
                        <stringProp name="Header.value">${SessionID2}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证响应JSON结构" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = responseJSON.getNames(responseJSON);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();
//System.out.println(field_name);

if (field_name.indexOf(&quot;dataidtimeversio&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="验证参与者列表(event/actors)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="参与者列表" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;GPOCT489ID&quot;,&quot;data&quot;:{&quot;request_type&quot;:&quot;0&quot;,&quot;event_id&quot;:&quot;${event_id}&quot;,&quot;timeline_id&quot;:&quot;${timeline_id}&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/actors</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证userid" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

int count = 0;
int uid = 0;
boolean flag = false;
String uid1 = vars.get(&quot;UserID&quot;);
String uid2 = vars.get(&quot;UserID2&quot;);
String[] uidArray = {uid1, uid2};
String temp = &quot;&quot;;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	JSONArray rept = data.getJSONArray(&quot;actors&quot;);
	if (rept.length() != 2)
	{                       
		Failure = true;
		FailureMessage = &quot;Actors length is not right&quot;;
	} 
	else
	{
		 for (int i = 0; i &lt; rept.length(); i++) { 
		        uid = rept.getJSONObject(i).getJSONObject(&quot;actor&quot;).getInt(&quot;user_id&quot;);
		        temp = String.valueOf(uid);
		        if (!Arrays.asList(uidArray).contains(temp)){
		        	flag = true;
		        	break;
		        }
		  }
		  if (flag)
		{                       
			Failure = true;
			FailureMessage = &quot;Actors uid is not right&quot;;
		}
	}

}
catch (Exception e) {
	System.out.println(e);
}

 

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="更新事件" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="更新事件(event/update)" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="更新事件(event/update)" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;event_id&quot;:${event_id},&quot;timeline_id&quot;:${timeline_id},&quot;title&quot;:&quot;Update${title}&quot;,&quot;user_type&quot;:0,&quot;event_contents&quot;:{&quot;list&quot;:[]},&quot;event_time&quot;:{&quot;begin_time&quot;:${start},&quot;end_time&quot;:${end},&quot;timeline_begin_time&quot;:${start},&quot;timeline_end_time&quot;:${end},&quot;repeated_type&quot;:0,&quot;repeated_end_time&quot;:0,&quot;completion_condition&quot;:0,&quot;completion_condition_end&quot;:0,&quot;reminders_begin&quot;:[-1],&quot;reminders_end&quot;:[-1],&quot;phone_reminder&quot;:0,&quot;totalTimeStr&quot;:&quot;${start_string}-${end_string}&quot;},&quot;event_display&quot;:{&quot;cover_url&quot;:&quot;${Cover_url}&quot;,&quot;background_color&quot;:&quot;#FBEBD8&quot;},&quot;event_rule&quot;:{&quot;public_visible&quot;:0},&quot;complex_captions&quot;:{&quot;reminder_begin&quot;:&quot;不提醒&quot;},&quot;limit_time_on_page&quot;:10,&quot;actors&quot;:[{&quot;user_id&quot;:${UserID},&quot;nickname&quot;:&quot;${nickName}&quot;,&quot;headimgurl&quot;:&quot;${avatarUrl}&quot;,&quot;is_admin&quot;:0}],&quot;files_stat&quot;:{&quot;image_count&quot;:0,&quot;video_count&quot;:0},&quot;create_time&quot;:${create_time},&quot;join_stat&quot;:{&quot;actor_count&quot;:1,&quot;answered_count&quot;:0,&quot;has_remark_plugin&quot;:0,&quot;has_reminder_plugin&quot;:0,&quot;has_vote_plugin&quot;:0,&quot;looked_count&quot;:0,&quot;notified_count&quot;:1,&quot;remark_count&quot;:0,&quot;voted_count&quot;:0}}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">event/update</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Get Random ID" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);



</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置时间" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import jmeter_extlib.ExtLibrary;
String tstamp = new ExtLibrary().stampNowDate();
vars.put(&quot;curtime&quot;,tstamp);</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49592">206</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证event_id" enabled="true">
                      <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
String temp = &quot;&quot;;
String exp_eid = vars.get(&quot;event_id&quot;);
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
		Long eid = data.getLong(&quot;event_id&quot;);
		temp = String.valueOf(eid);
	
		if (!exp_eid.equals(temp))
		{                       
			Failure = true;
			FailureMessage = &quot;Event id is not right&quot;;
		} 
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}</stringProp>
                      <stringProp name="BeanShellAssertion.filename"></stringProp>
                      <stringProp name="BeanShellAssertion.parameters"></stringProp>
                      <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                    </BeanShellAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="验证事件更新" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;id&quot;:&quot;68V3W4ZYD9&quot;,&quot;data&quot;:{&quot;event_id&quot;:&quot;${event_id}&quot;,&quot;timeline_id&quot;:0}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">event/query</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49592">206</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证更新数据" enabled="true">
                      <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String temp = &quot;&quot;;
String exp_title = &quot;Update&quot; + vars.get(&quot;title&quot;);
String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	String title = data.getString(&quot;title&quot;);
	temp = String.valueOf(title);

}
catch (Exception e) {
	System.out.println(e);
}

if (!exp_title.equals(temp))
{                       
	Failure = true;
	FailureMessage = &quot;Event id is not right&quot;;
} </stringProp>
                      <stringProp name="BeanShellAssertion.filename"></stringProp>
                      <stringProp name="BeanShellAssertion.parameters"></stringProp>
                      <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                    </BeanShellAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="修改提醒设置" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="修改提醒设置(event/set_reminders)" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改提醒设置" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;event_id&quot;:&quot;${event_id}&quot;,&quot;event_time&quot;:{&quot;begin_time&quot;:${start},&quot;end_time&quot;:${end},&quot;timeline_begin_time&quot;:${start},&quot;timeline_end_time&quot;:${end},&quot;repeated_type&quot;:3,&quot;repeated_end_time&quot;:0,&quot;completion_condition&quot;:0,&quot;completion_condition_end&quot;:0,&quot;reminders_begin&quot;:[3600],&quot;reminders_end&quot;:[-1],&quot;phone_reminder&quot;:0,&quot;totalTimeStr&quot;:&quot;${start_string} - ${end_string}&quot;}}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">event/set_reminders</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);
</stringProp>
                    </BeanShellPreProcessor>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49592">206</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证result" enabled="true">
                      <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
String result = &quot;&quot;;

try
{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	result = data.getString(&quot;result&quot;);
	
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}

if (!result.equals(&quot;success&quot;))
{                       
	Failure = true;
	FailureMessage = &quot;Update reminder is failed&quot;;
} </stringProp>
                      <stringProp name="BeanShellAssertion.filename"></stringProp>
                      <stringProp name="BeanShellAssertion.parameters"></stringProp>
                      <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                    </BeanShellAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="事件发送到列表(event/admin_tags)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="事件发送到列表" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;offset&quot;:0,&quot;rows&quot;:500,&quot;event_id&quot;:${event_id}}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/admin_tags</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数值" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);



</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证event数量与ID" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String temp = &quot;&quot;;
String exp_eid = vars.get(&quot;event_id&quot;);
String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

try{
	JSONArray data = responseJSON.getJSONObject(&quot;data&quot;).getJSONObject(&quot;posts&quot;);
	if (data.length() != 1)
	{                       
		Failure = true;
		FailureMessage = &quot;Event count is not right&quot;;
		
	} 


}
catch (Exception e) {
	System.out.println(e);
}

</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User1更新发起者to User2(event/change_sponsor)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="更新发起者" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;T4G6SUL5BP&quot;,&quot;data&quot;:{&quot;new_sponsor_id&quot;:${UserID2},&quot;event_id&quot;:&quot;${event_id}&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/change_sponsor</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Get Random ID" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);



</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证result" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
String result = &quot;&quot;;
try
{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	result = data.getString(&quot;result&quot;);
	
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}

if (!result.equals(&quot;success&quot;))
{                       
	Failure = true;
	FailureMessage = &quot;Update reminder is failed&quot;;
} </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User1退出事件(event/quit)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User1退出事件退出事件" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;event_id&quot;:${event_id}}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/quit</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证result" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
String result = &quot;&quot;;

try
{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	result = data.getString(&quot;result&quot;);
	
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}

if (!result.equals(&quot;success&quot;))
{                       
	Failure = true;
	FailureMessage = &quot;Quit event is failed&quot;;
} </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User1重新参与事件(event/join)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User1重新参与事件" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;event_id&quot;:${event_id}}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/join</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="User1 Session HTTP Request Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">charset</stringProp>
                        <stringProp name="Header.value">utf-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">session-id</stringProp>
                        <stringProp name="Header.value">${SessionID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;

String tstamp = new ExtLibrary().stampNowDate();
vars.put(&quot;curtime&quot;,tstamp);

String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证响应JSON结构" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = responseJSON.getNames(responseJSON);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();
//System.out.println(field_name);

if (field_name.indexOf(&quot;dataidtimeversio&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User2移除参与者User1(event/remove_actor)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User2移除参与者User1" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;event_id&quot;:&quot;${event_id}&quot;,&quot;actor_ids&quot;:[${UserID}]}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/remove_actor</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Get Random ID" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);



</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证result" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
result = &quot;&quot;;

try
{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	result = data.getString(&quot;result&quot;);
	
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}

if (!result.equals(&quot;success&quot;))
{                       
	Failure = true;
	FailureMessage = &quot;Update reminder is failed&quot;;
} </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="User2 Session HTTP Request Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">charset</stringProp>
                        <stringProp name="Header.value">utf-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">session-id</stringProp>
                        <stringProp name="Header.value">${SessionID2}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User1重新参与事件(event/join)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User1重新参与事件" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;event_id&quot;:${event_id}}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/join</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="User1 Session HTTP Request Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">charset</stringProp>
                        <stringProp name="Header.value">utf-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">session-id</stringProp>
                        <stringProp name="Header.value">${SessionID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;

String tstamp = new ExtLibrary().stampNowDate();
vars.put(&quot;curtime&quot;,tstamp);

String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证响应JSON结构" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = responseJSON.getNames(responseJSON);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();
//System.out.println(field_name);

if (field_name.indexOf(&quot;dataidtimeversio&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User2指定管理员to User1(event/bull_admin)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User2指定管理员to User1" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;event_id&quot;:&quot;${event_id}&quot;,&quot;admin_ids&quot;:[${UserID}]}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/bull_admin</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Get Random ID" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);



</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证result" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
String result = &quot;&quot;;
try
{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	result = data.getString(&quot;result&quot;);
	
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}

if (!result.equals(&quot;success&quot;))
{                       
	Failure = true;
	FailureMessage = &quot;Update reminder is failed&quot;;
} </stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="User2 Session HTTP Request Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">charset</stringProp>
                        <stringProp name="Header.value">utf-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">session-id</stringProp>
                        <stringProp name="Header.value">${SessionID2}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="User2删除事件(event/delete)" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User2删除事件" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;ZKXXHS75I5&quot;,&quot;data&quot;:{&quot;event_id&quot;:&quot;${event_id}&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/delete</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="User2 Session HTTP Request Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">charset</stringProp>
                        <stringProp name="Header.value">utf-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">session-id</stringProp>
                        <stringProp name="Header.value">${SessionID2}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证结果" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	String result = data.getString(&quot;result&quot;);
	if (!result.equals(&quot;success&quot;))
	{                       
		Failure = true;
		FailureMessage = &quot;Delete event is failed&quot;;
	} 
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="未完成接口" enabled="false"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="附加事件" enabled="true"/>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="事件置顶" enabled="true"/>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="查询日程审核状态" enabled="true"/>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="请求日程审核" enabled="true"/>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="审核加入日程" enabled="true"/>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="用户接口" enabled="true"/>
          <hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="用户接口" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="sms_code" elementType="Argument">
                  <stringProp name="Argument.name">sms_code</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="phone_number" elementType="Argument">
                  <stringProp name="Argument.name">phone_number</stringProp>
                  <stringProp name="Argument.value">13194693413</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Request Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">charset</stringProp>
                  <stringProp name="Header.value">utf-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">session-id</stringProp>
                  <stringProp name="Header.value">${SessionID}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="读取用户设置(user/get_setting)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="读取用户设置" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">user/get_setting</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数值" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);



</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49592">206</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="读取用户绑定的手机(user/get_phones)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="读取用户绑定的手机" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">user/get_phones</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数值" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);



</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49592">206</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="获取验证码(user/send_sms)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取验证码" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;mobile_number&quot;:&quot;${phone_number}&quot;,&quot;country_code&quot;:&quot;86&quot;,&quot;type&quot;:&quot;reminder&quot;,&quot;client_type&quot;:&quot;miniprogram&quot;}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">user/send_sms</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数值" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);



</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49592">206</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="得到验证码" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	String result = data.getString(&quot;sms_code&quot;);
	vars.put(&quot;sms_code&quot;, result);
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="验证验证码(user/verify_sms)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="验证验证码" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;GGWSCTORJ6&quot;,&quot;data&quot;:{&quot;mobile_number&quot;:&quot;${phone_number}&quot;,&quot;sms_input&quot;:&quot;${sms_code}&quot;,&quot;client_type&quot;:&quot;miniprogram&quot;,&quot;type&quot;:&quot;reminder&quot;}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">user/verify_sms</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数值" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);



</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49592">206</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证结果" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	String result = data.getString(&quot;result&quot;);
	if (!result.equals(&quot;success&quot;))
	{                       
		Failure = true;
		FailureMessage = &quot;Delete event is failed&quot;;
	} 
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="保存用户设置(user/save_setting)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="保存用户设置" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;phone_reminder&quot;:1}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">user/save_setting</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数值" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);



</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49592">206</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证结果" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	String result = data.getString(&quot;result&quot;);
	if (!result.equals(&quot;success&quot;))
	{                       
		Failure = true;
		FailureMessage = &quot;Delete event is failed&quot;;
	} 
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="未完成接口" enabled="false"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="关闭引导" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="关闭引导" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">templet/close_guide</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数值" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);



</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证结果" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	String result = data.getString(&quot;result&quot;);
	if (!result.equals(&quot;success&quot;))
	{                       
		Failure = true;
		FailureMessage = &quot;Delete event is failed&quot;;
	} 
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="用户完善详情" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="用户完善详情" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">mp/complete</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数值" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);



</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证结果" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	String result = data.getString(&quot;result&quot;);
	if (!result.equals(&quot;success&quot;))
	{                       
		Failure = true;
		FailureMessage = &quot;Delete event is failed&quot;;
	} 
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="互动相关协议" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="InteractFlag" elementType="Argument">
                  <stringProp name="Argument.name">InteractFlag</stringProp>
                  <stringProp name="Argument.value">&quot;True&quot;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="回答" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User1创建带收集信息事件" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;I5US82QXF6&quot;,&quot;data&quot;:{&quot;title&quot;:&quot;${title}&quot;,&quot;event_contents&quot;:{&quot;list&quot;:[{&quot;is_menu_open&quot;:false,&quot;content_type&quot;:&quot;remark&quot;,&quot;content&quot;:&quot;{\&quot;segment_id\&quot;:0,\&quot;always_effect\&quot;:0,\&quot;questions\&quot;:[{\&quot;templet_id\&quot;:1,\&quot;question_id\&quot;:0,\&quot;content\&quot;:\&quot;姓名\&quot;,\&quot;necessary\&quot;:1,\&quot;type\&quot;:\&quot;string\&quot;,\&quot;checked\&quot;:1,\&quot;data_type\&quot;:\&quot;string\&quot;,\&quot;create_time\&quot;:0},{\&quot;templet_id\&quot;:2,\&quot;question_id\&quot;:0,\&quot;content\&quot;:\&quot;手机号\&quot;,\&quot;necessary\&quot;:1,\&quot;type\&quot;:\&quot;number\&quot;,\&quot;checked\&quot;:1,\&quot;data_type\&quot;:\&quot;number\&quot;,\&quot;create_time\&quot;:0}]}&quot;}]},&quot;attach_list&quot;:[],&quot;event_display&quot;:{&quot;cover_url&quot;:&quot;${default_cover_url}&quot;},&quot;event_time&quot;:{&quot;begin_time&quot;:${start},&quot;end_time&quot;:${end},&quot;reminders_begin&quot;:[-1],&quot;reminders_end&quot;:[-1],&quot;repeated_type&quot;:0,&quot;repeated_end_time&quot;:0,&quot;completion_condition&quot;:0,&quot;completion_condition_end&quot;:0,&quot;phone_reminder&quot;:0}}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">event/create</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Request Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">charset</stringProp>
                      <stringProp name="Header.value">utf-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">session-id</stringProp>
                      <stringProp name="Header.value">${SessionID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置开始时间与结束时间戳，title" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import jmeter_extlib.ExtLibrary;
String tstamp = new ExtLibrary().stampNowDate();
//System.out.println(tstamp);
String start = new ExtLibrary().addTime(tstamp,2,&quot;hour&quot;);
//System.out.println(start);
vars.put(&quot;start&quot;,start);
String end = new ExtLibrary().addTime(tstamp,3,&quot;hour&quot;);
vars.put(&quot;end&quot;,end);
String title = &quot;event_withcollectInfo&quot; + tstamp;
vars.put(&quot;title&quot;,title);
vars.put(&quot;IntectFlag&quot;,&quot;True&quot;);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49592">206</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="得到event_Id" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	Long event_id = data.getLong(&quot;event_id&quot;);
	vars.put(&quot;event_id&quot;,String.valueOf(event_id));

}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证响应JSON结构" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = responseJSON.getNames(responseJSON);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();
//System.out.println(field_name);

if (field_name.indexOf(&quot;dataidtimeversion&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询事件详情" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;68V3W4ZYD9&quot;,&quot;data&quot;:{&quot;event_id&quot;:&quot;${event_id}&quot;,&quot;timeline_id&quot;:0}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">event/query</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49592">206</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="得到timeline_id 信息" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import org.json.*;
import java.util.Arrays;

String temp = &quot;&quot;;
String exp_eid = vars.get(&quot;event_id&quot;);
String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	Long timeline_id = data.getLong(&quot;timeline_id&quot;);
	vars.put(&quot;timeline_id&quot;,String.valueOf(timeline_id));
	Long create_time = data.getLong(&quot;create_time&quot;);
	vars.put(&quot;create_time&quot;,String.valueOf(create_time));

}
catch (Exception e) {
	System.out.println(e);
}</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="得到question 信息" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import org.json.*;
import java.util.Arrays;


Long segid = 0;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	JSONObject event = data.getJSONObject(&quot;event_contents&quot;);
	JSONArray list = event.getJSONArray(&quot;list&quot;);
	String content = list.getJSONObject(0).getString(&quot;content&quot;);
	JSONTokener jsonTokener = new JSONTokener(content);   
     JSONObject contjson = (JSONObject) jsonTokener.nextValue();
     JSONArray questions = contjson.getJSONArray(&quot;questions&quot;);
     Long qid1 = questions.getJSONObject(0).getLong(&quot;question_id&quot;);
     Long qid2 = questions.getJSONObject(1).getLong(&quot;question_id&quot;);
	segid = contjson.getLong(&quot;segment_id&quot;);
	//System.out.println(segid);
	vars.put(&quot;segment_id&quot;,String.valueOf(segid));
	vars.put(&quot;question_id1&quot;,String.valueOf(qid1));
	vars.put(&quot;question_id2&quot;,String.valueOf(qid2));

}
catch (Exception e) {
	System.out.println(e);
}</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证content_type" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;


Long segid = 0;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
String content_type = &quot;&quot;;

try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	JSONObject event = data.getJSONObject(&quot;event_contents&quot;);
	JSONArray list = event.getJSONArray(&quot;list&quot;);
	content_type = list.getJSONObject(0).getString(&quot;content_type&quot;);
}
catch (Exception e) {
	System.out.println(e);
}

if (!content_type.equals(&quot;remark&quot;))
{                       
	Failure = true;
	vars.put(&quot;IntectFlag&quot;,&quot;False&quot;);
	FailureMessage = &quot;content type is not right&quot;;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果事件创建成功" enabled="true">
                <stringProp name="IfController.condition">&quot;${IntectFlag}&quot; == &quot;True&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User2参与事件" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;event_id&quot;:${event_id}}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/join</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;

String tstamp = new ExtLibrary().stampNowDate();
vars.put(&quot;curtime&quot;,tstamp);

String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Request Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">charset</stringProp>
                        <stringProp name="Header.value">utf-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">session-id</stringProp>
                        <stringProp name="Header.value">${SessionID2}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证响应JSON结构" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = responseJSON.getNames(responseJSON);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();
//System.out.println(field_name);

if (field_name.indexOf(&quot;dataidtimeversio&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询事件详情" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;68V3W4ZYD9&quot;,&quot;data&quot;:{&quot;event_id&quot;:&quot;${event_id}&quot;,&quot;timeline_id&quot;:0}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/query</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证参与人数" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String temp = &quot;&quot;;
String exp_eid = vars.get(&quot;event_id&quot;);
String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
int actor_count = 0;

try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	JSONObject join_stat = data.getJSONObject(&quot;join_stat&quot;);
	actor_count = join_stat.getInt(&quot;actor_count&quot;);


}
catch (Exception e) {
	System.out.println(e);
}

if (actor_count != 2)
{                       
	Failure = true;
	FailureMessage = &quot;actor count is not right&quot;;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User2回答事件" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;event_id&quot;:${event_id},&quot;timeline_id&quot;:${timeline_id},&quot;remarks_answers&quot;:[{&quot;segment_id&quot;:${segment_id},&quot;answers&quot;:[{&quot;question_id&quot;:${question_id1},&quot;selecteds&quot;:[],&quot;text&quot;:&quot;test&quot;,&quot;new_options&quot;:[],&quot;image_content&quot;:{&quot;text&quot;:&quot;&quot;,&quot;pictures&quot;:[]},&quot;questionType&quot;:&quot;string&quot;},{&quot;question_id&quot;:${question_id2},&quot;selecteds&quot;:[],&quot;text&quot;:&quot;95555&quot;,&quot;new_options&quot;:[],&quot;image_content&quot;:{&quot;text&quot;:&quot;&quot;,&quot;pictures&quot;:[]},&quot;questionType&quot;:&quot;number&quot;}]}]}}&#xd;
&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/answer</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Request Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">charset</stringProp>
                        <stringProp name="Header.value">utf-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">session-id</stringProp>
                        <stringProp name="Header.value">${SessionID2}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证响应JSON结构" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = responseJSON.getNames(responseJSON);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();
//System.out.println(field_name);

if (field_name.indexOf(&quot;dataidtimeversio&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证结果" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	String result = data.getString(&quot;result&quot;);
	if (!result.equals(&quot;success&quot;))
	{                       
		Failure = true;
		FailureMessage = &quot;Delete event is failed&quot;;
	} 
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询事件详情" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;68V3W4ZYD9&quot;,&quot;data&quot;:{&quot;event_id&quot;:&quot;${event_id}&quot;,&quot;timeline_id&quot;:0}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/query</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证回答人数" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String temp = &quot;&quot;;
String exp_eid = vars.get(&quot;event_id&quot;);
String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
int actor_count = 0;

try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	JSONObject join_stat = data.getJSONObject(&quot;join_stat&quot;);
	actor_count = join_stat.getInt(&quot;answered_count&quot;);


}
catch (Exception e) {
	System.out.println(e);
}

if (actor_count != 1)
{                       
	Failure = true;
	FailureMessage = &quot;answered count is not right&quot;;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User1删除事件" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;ZKXXHS75I5&quot;,&quot;data&quot;:{&quot;event_id&quot;:&quot;${event_id}&quot;}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">event/delete</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49592">206</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证结果" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	String result = data.getString(&quot;result&quot;);
	if (!result.equals(&quot;success&quot;))
	{                       
		Failure = true;
		FailureMessage = &quot;Delete event is failed&quot;;
	} 
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="投票" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User1创建带投票信息事件" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;QA65A39J4L&quot;,&quot;data&quot;:{&quot;title&quot;:&quot;${title}&quot;,&quot;event_contents&quot;:{&quot;list&quot;:[{&quot;is_menu_open&quot;:false,&quot;content_type&quot;:&quot;vote&quot;,&quot;content&quot;:&quot;{\&quot;title\&quot;:\&quot;test\&quot;,\&quot;segment_id\&quot;:0,\&quot;questions\&quot;:[{\&quot;question_id\&quot;:0,\&quot;content\&quot;:\&quot;test\&quot;,\&quot;type\&quot;:\&quot;radio\&quot;,\&quot;allow_add_option\&quot;:0,\&quot;multi_max\&quot;:1,\&quot;multi_min\&quot;:1,\&quot;options\&quot;:[{\&quot;option_id\&quot;:0,\&quot;question_id\&quot;:0,\&quot;content\&quot;:\&quot;cucumber\&quot;},{\&quot;option_id\&quot;:0,\&quot;question_id\&quot;:0,\&quot;content\&quot;:\&quot;eggplant\&quot;}]}]}&quot;}]},&quot;attach_list&quot;:[],&quot;event_display&quot;:{&quot;cover_url&quot;:&quot;${default_cover_url}&quot;},&quot;event_time&quot;:{&quot;begin_time&quot;:${start},&quot;end_time&quot;:${end},&quot;reminders_begin&quot;:[-1],&quot;reminders_end&quot;:[-1],&quot;repeated_type&quot;:0,&quot;repeated_end_time&quot;:0,&quot;completion_condition&quot;:0,&quot;completion_condition_end&quot;:0,&quot;phone_reminder&quot;:0}}}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">event/create</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Request Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">charset</stringProp>
                      <stringProp name="Header.value">utf-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">session-id</stringProp>
                      <stringProp name="Header.value">${SessionID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置开始时间与结束时间戳，title" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import jmeter_extlib.ExtLibrary;
String tstamp = new ExtLibrary().stampNowDate();
//System.out.println(tstamp);
String start = new ExtLibrary().addTime(tstamp,2,&quot;hour&quot;);
//System.out.println(start);
vars.put(&quot;start&quot;,start);
String end = new ExtLibrary().addTime(tstamp,3,&quot;hour&quot;);
vars.put(&quot;end&quot;,end);
String title = &quot;event_withvoteInfo&quot; + tstamp;
vars.put(&quot;title&quot;,title);
vars.put(&quot;IntectFlag&quot;,&quot;True&quot;);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49592">206</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="得到event_Id" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	Long event_id = data.getLong(&quot;event_id&quot;);
	vars.put(&quot;event_id&quot;,String.valueOf(event_id));

}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证响应JSON结构" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = responseJSON.getNames(responseJSON);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();
//System.out.println(field_name);

if (field_name.indexOf(&quot;dataidtimeversion&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询事件详情" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;68V3W4ZYD9&quot;,&quot;data&quot;:{&quot;event_id&quot;:&quot;${event_id}&quot;,&quot;timeline_id&quot;:0}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">event/query</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49592">206</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="得到timeline_id 信息" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import org.json.*;
import java.util.Arrays;

String temp = &quot;&quot;;
String exp_eid = vars.get(&quot;event_id&quot;);
String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	Long timeline_id = data.getLong(&quot;timeline_id&quot;);
	vars.put(&quot;timeline_id&quot;,String.valueOf(timeline_id));
	Long create_time = data.getLong(&quot;create_time&quot;);
	vars.put(&quot;create_time&quot;,String.valueOf(create_time));

}
catch (Exception e) {
	System.out.println(e);
}</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="得到question 信息" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import org.json.*;
import java.util.Arrays;


Long segid = 0;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	JSONObject event = data.getJSONObject(&quot;event_contents&quot;);
	JSONArray list = event.getJSONArray(&quot;list&quot;);
	String content = list.getJSONObject(0).getString(&quot;content&quot;);
	JSONTokener jsonTokener = new JSONTokener(content);   
     JSONObject contjson = (JSONObject) jsonTokener.nextValue();
     // get questions value
     // only get the first option
     JSONArray questions = contjson.getJSONArray(&quot;questions&quot;);
     Long qid1 = questions.getJSONObject(0).getLong(&quot;question_id&quot;);
     JSONArray options = questions.getJSONObject(0).getJSONArray(&quot;options&quot;);
     Long opid = options.getJSONObject(0).getLong(&quot;option_id&quot;);
     
	segid = contjson.getLong(&quot;segment_id&quot;);
	//System.out.println(segid);
	vars.put(&quot;segment_id&quot;,String.valueOf(segid));
	vars.put(&quot;question_id1&quot;,String.valueOf(qid1));
	vars.put(&quot;option_id&quot;,String.valueOf(opid));


}
catch (Exception e) {
	System.out.println(e);
}</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证content_type" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;


Long segid = 0;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
String content_type = &quot;&quot;;

try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	JSONObject event = data.getJSONObject(&quot;event_contents&quot;);
	JSONArray list = event.getJSONArray(&quot;list&quot;);
	content_type = list.getJSONObject(0).getString(&quot;content_type&quot;);
}
catch (Exception e) {
	System.out.println(e);
}

if (!content_type.equals(&quot;vote&quot;))
{                       
	Failure = true;
	vars.put(&quot;IntectFlag&quot;,&quot;False&quot;);
	FailureMessage = &quot;content type is not right&quot;;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果事件创建成功" enabled="true">
                <stringProp name="IfController.condition">&quot;${IntectFlag}&quot; == &quot;True&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User2参与事件" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;event_id&quot;:${event_id}}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/join</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;

String tstamp = new ExtLibrary().stampNowDate();
vars.put(&quot;curtime&quot;,tstamp);

String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Request Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">charset</stringProp>
                        <stringProp name="Header.value">utf-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">session-id</stringProp>
                        <stringProp name="Header.value">${SessionID2}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证响应JSON结构" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = responseJSON.getNames(responseJSON);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();
//System.out.println(field_name);

if (field_name.indexOf(&quot;dataidtimeversio&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询事件详情" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;68V3W4ZYD9&quot;,&quot;data&quot;:{&quot;event_id&quot;:&quot;${event_id}&quot;,&quot;timeline_id&quot;:0}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/query</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证参与人数" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String temp = &quot;&quot;;
String exp_eid = vars.get(&quot;event_id&quot;);
String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
int actor_count = 0;

try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	JSONObject join_stat = data.getJSONObject(&quot;join_stat&quot;);
	actor_count = join_stat.getInt(&quot;actor_count&quot;);


}
catch (Exception e) {
	System.out.println(e);
}

if (actor_count != 2)
{                       
	Failure = true;
	FailureMessage = &quot;actor count is not right&quot;;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User2投票(用户2)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;G71VOLCYBQ&quot;,&quot;data&quot;:{&quot;event_id&quot;:${event_id},&quot;timeline_id&quot;:${timeline_id},&quot;vote_answers&quot;:[{&quot;segment_id&quot;:${segment_id},&quot;answers&quot;:[{&quot;question_id&quot;:${question_id1},&quot;selecteds&quot;:[${option_id}],&quot;questionType&quot;:&quot;radio&quot;,&quot;new_options&quot;:[]}]}]}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/answer</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Request Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">charset</stringProp>
                        <stringProp name="Header.value">utf-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">session-id</stringProp>
                        <stringProp name="Header.value">${SessionID2}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证响应JSON结构" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = responseJSON.getNames(responseJSON);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();
//System.out.println(field_name);

if (field_name.indexOf(&quot;dataidtimeversio&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证结果" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	String result = data.getString(&quot;result&quot;);
	if (!result.equals(&quot;success&quot;))
	{                       
		Failure = true;
		FailureMessage = &quot;Delete event is failed&quot;;
	} 
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User1投票(用户1)" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;G71VOLCYBQ&quot;,&quot;data&quot;:{&quot;event_id&quot;:${event_id},&quot;timeline_id&quot;:${timeline_id},&quot;vote_answers&quot;:[{&quot;segment_id&quot;:${segment_id},&quot;answers&quot;:[{&quot;question_id&quot;:${question_id1},&quot;selecteds&quot;:[${option_id}],&quot;questionType&quot;:&quot;radio&quot;,&quot;new_options&quot;:[]}]}]}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/answer</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Request Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">charset</stringProp>
                        <stringProp name="Header.value">utf-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">session-id</stringProp>
                        <stringProp name="Header.value">${SessionID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证响应JSON结构" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = responseJSON.getNames(responseJSON);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();
//System.out.println(field_name);

if (field_name.indexOf(&quot;dataidtimeversio&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证结果" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	String result = data.getString(&quot;result&quot;);
	if (!result.equals(&quot;success&quot;))
	{                       
		Failure = true;
		FailureMessage = &quot;Delete event is failed&quot;;
	} 
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User1联合统计" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;${ID}&quot;,&quot;data&quot;:{&quot;event_id&quot;:&quot;${event_id}&quot;,&quot;timeline_id&quot;:&quot;${timeline_id}&quot;}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/vote_union_stat</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">import jmeter_extlib.ExtLibrary;
String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);
</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Request Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">charset</stringProp>
                        <stringProp name="Header.value">utf-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">session-id</stringProp>
                        <stringProp name="Header.value">${SessionID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证count" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
Long count = 0;
Long percent = 0;
try
{
	
	JSONArray union_stat = data.getJSONArray(&quot;union_stats&quot;);
	count = union_stat.getJSONArray(0).getJSONObject(0).getLong(&quot;count&quot;);
	percent = union_stat.getJSONArray(0).getJSONObject(0).getLong(&quot;percent&quot;);
	System.out.println(percent);

}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}

if (count != 2)
{                       
	Failure = true;
	FailureMessage = &quot;count value is not right&quot;;
}

if (percent != 1)
{                       
	Failure = true;
	FailureMessage = &quot;percent value is not right&quot;;
}</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询事件详情" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;id&quot;:&quot;68V3W4ZYD9&quot;,&quot;data&quot;:{&quot;event_id&quot;:&quot;${event_id}&quot;,&quot;timeline_id&quot;:0}}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">event/query</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49592">206</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证投票人数" enabled="true">
                    <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String temp = &quot;&quot;;
String exp_eid = vars.get(&quot;event_id&quot;);
String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
int actor_count = 0;

try{
	JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
	JSONObject join_stat = data.getJSONObject(&quot;join_stat&quot;);
	actor_count = join_stat.getInt(&quot;voted_count&quot;);


}
catch (Exception e) {
	System.out.println(e);
}

if (actor_count != 2)
{                       
	Failure = true;
	FailureMessage = &quot;answered count is not right&quot;;
}
</stringProp>
                    <stringProp name="BeanShellAssertion.filename"></stringProp>
                    <stringProp name="BeanShellAssertion.parameters"></stringProp>
                    <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                  </BeanShellAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User1删除事件" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;ZKXXHS75I5&quot;,&quot;data&quot;:{&quot;event_id&quot;:&quot;${event_id}&quot;}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">event/delete</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49592">206</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证结果" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	String result = data.getString(&quot;result&quot;);
	if (!result.equals(&quot;success&quot;))
	{                       
		Failure = true;
		FailureMessage = &quot;Delete event is failed&quot;;
	} 
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="未完成接口" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="评论" enabled="true"/>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="签到" enabled="true"/>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="上传文件" enabled="true"/>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="消息提醒协议(message/query)" enabled="true"/>
          <hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="消息提醒协议" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="消息提醒(/message/query)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="带所有类型" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;2GDI3FAKDM&quot;,&quot;data&quot;:{&quot;type&quot;:&quot;event_change/event_join/event_reminder/moments&quot;,&quot;begin_time&quot; : 0,&quot;,&quot;user_id&quot;:&quot;${UserID}&quot;,&quot;limit_rows&quot;:-1,&quot;begin_time&quot;:0,&quot;is_new&quot;:1,&quot;query_unread_count&quot;:1}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">message/query</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49592">206</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="上传formid(/sys/submit_form_id)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="带所有类型" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;459UA57O28&quot;,&quot;data&quot;:{&quot;form_id&quot;:&quot;1496916576311&quot;}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">sys/submit_form_id</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证响应代码" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49592">206</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证结果" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	String result = data.getString(&quot;result&quot;);
	if (!result.equals(&quot;success&quot;))
	{                       
		Failure = true;
		FailureMessage = &quot;Delete event is failed&quot;;
	} 
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="模板" enabled="true"/>
          <hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="模板" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="查询模板列表(/templet/query_list)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询模板(templet/query_list)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;id&quot;:&quot;P6WHS7L336&quot;,&quot;data&quot;:{}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">templet/query_list</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证data结构" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = data.getNames(data);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();

if (field_name.indexOf(&quot;guide_closedhot_templetshot_titlesliders&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="得到templet_Id" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	Long templet_id = data.getJSONArray(&quot;hot_templets&quot;).getJSONObject(0).getLong(&quot;event_id&quot;);
	vars.put(&quot;templet_id&quot;,String.valueOf(templet_id));
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}



</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);
try
{
	Long templet_id = data.getJSONArray(&quot;hot_templets&quot;).getJSONObject(0).getLong(&quot;templet_id&quot;);
	vars.put(&quot;templet_id&quot;,String.valueOf(templet_id));
}
catch (Exception e){
	System.out.println(&quot;Exception:&quot; + e);
	
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="查询模板详情(/templet/query)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询模板详情(templet/query)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot; : ${ID},&#xd;
    &quot;time&quot; : ${curtime},&#xd;
    &quot;data&quot; : {&#xd;
        &quot;templet_id&quot;:${templet_id},&#xd;
    }&#xd;
 }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">templet/query</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import jmeter_extlib.ExtLibrary;

String tstamp = new ExtLibrary().stampNowDate();
vars.put(&quot;curtime&quot;,tstamp);

String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证data结构" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);
JSONObject data = responseJSON.getJSONObject(&quot;data&quot;);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = data.getNames(data);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();

if (field_name.indexOf(&quot;categorysguide_closedhot_templetshot_titlesliders&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="使用模板(/templet/use)" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="使用模板(templet/use)" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;id&quot; : ${ID},&#xd;
    &quot;time&quot; : ${curtime},&#xd;
    &quot;data&quot; : {&#xd;
        &quot;templet_id&quot;:&quot;${templetID}&quot;,&#xd;
        &quot;params&quot;:{&#xd;
            &quot;base_time&quot;:${curtime},&#xd;
            &quot;title&quot;:&quot;QATEST&quot;&#xd;
        },&#xd;
        &quot;tag_id&quot;:${tagid},&#xd;
        &quot;create_mode&quot;:0&#xd;
    }&#xd;
 }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">templet/use</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="设置参数" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import jmeter_extlib.ExtLibrary;

String tstamp = new ExtLibrary().stampNowDate();
vars.put(&quot;curtime&quot;,tstamp);

String value = new ExtLibrary().get_number();
vars.put(&quot;ID&quot;,value);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="验证响应JSON结构" enabled="true">
                  <stringProp name="BeanShellAssertion.query">import org.json.*;
import java.util.Arrays;

String jsonString = prev.getResponseDataAsString();
JSONObject responseJSON = new JSONObject(jsonString);

String[] temp = null;
StringBuffer buf = new StringBuffer();
temp = responseJSON.getNames(responseJSON);
Arrays.sort(temp);

for (int i=0; i &lt; temp.length; i++)
{
	buf.append(temp[i]);
}

String field_name = buf.toString();
//System.out.println(field_name);

if (field_name.indexOf(&quot;dataidtimeversio&quot;) == -1)
{                       
	Failure = true;
	FailureMessage = &quot;Data structure is not matched with expected result. actual name:&quot; + field_name;
}
</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="工作台" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
